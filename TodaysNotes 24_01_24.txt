What	is	the	hashCode method used	for	in	Java?
HashCode's are used in hashing to decide which group (or bucket) an object should be placed into. A
group of object's might share the same hashcode.
The implementation of hash code decides effectiveness of Hashing. A good hashing function evenly
distributes object's into different groups (or buckets).
A good hashCode	method	should	have	the	following	properties	
• If obj1.equals(obj2) is true, then obj1.hashCode() should be equal to obj2.hashCode()
• obj.hashCode() should return the same value when run multiple times, if values of obj used in
equals() have not changed.
• If obj1.equals(obj2) is false, it is NOT required that obj1.hashCode() is not equal to
obj2.hashCode(). Two unequal objects MIGHT have the same hashCode.
A sample hashcode implementation of Client class which meets above constraints is given below:
//Client class
@Override
public int hashCode()	{
				final int prime	=	31;
				int result	=	1;
				result	=	prime	*	result	+	id;
				return result;
}

Explain	inheritance	with	Examples.
Consider the example class Actor below:
public class Actor	{
				public void act(){
								System.out.println("Act");
				};
				

What	is	Method	Overloading?
A method having the same name as another method (in same class or a sub class) but having different
parameters is called an Overloaded Method.
Example	1
doIt	method	is	overloaded	in	the	below	example:
class Foo{
				public void doIt(int number){
								
				}
				public void doIt(String	string){
								
				}
}
Example	2
Overloading	can	also	be	done	from	a	sub	class

class Bar	extends Foo{
				public void doIt(float number){
								
				}
}
Java	Example
• Constructors
o public	HashMap(int initialCapacity,	float	loadFactor)
o public	HashMap()	{
o public	HashMap(int	initialCapacity)
• Methods
o public	boolean	addAll(Collection<?	extends	E>	c)
o public	boolean	addAll(int	index,	Collection<?	extends	E>	c)

Q) What	is	Method	Overriding?

Creating a Sub Class Method with same signature as that of a method in SuperClass is called Method
Overriding.
Let’s	define	an	Animal	class	with	a	method	shout.
public class Animal	{
				public String	bark()	{
								return "Don't	Know!";
				}
}
Let’s	create	a	sub	class	of Animal	– Cat		- overriding	the	existing	shout	method	in	Animal.
class Cat	extends Animal	{
				public String	bark()	{
								return "Meow	Meow";
				}
}
bark method in Cat class is overriding the bark method in Animal class.
Java Example : HashMap public int size() overrides AbstractMap public int size()

Q) Can	super	class	reference	variable	can	hold	an	object	of	sub	class?

Yes. Look at the example below:
Actor reference variables actor1, actor2 hold the reference of objects of sub classes of Animal, Comedian
and Hero.
Since object is super class of all classes, an Object reference variable can also hold an instance of any
class.

//Object	is	super	class	of	all	java	classes
Object	object =	new Hero();	
public class Actor	{
				public void act(){
								System.out.println("Act");
				};
}
//IS-A	relationship.	Hero	is-a	Actor
public class Hero	extends Actor	{
				public void fight(){
								System.out.println("fight");
				};
}
//IS-A	relationship.	Comedian	is-a	Actor
public class Comedian	extends Actor	{
				public void performComedy(){
								System.out.println("Comedy");
				};
}
Actor	actor1 =	new Comedian();
Actor	actor2 =	new Hero();

Q) Is	Multiple	Inheritance	allowed	in	Java?

Multiple Inheritance results in a number of complexities. Java does not support Multiple Inheritance.
class Dog	extends Animal, Pet	{ //COMPILER	ERROR
}
However, we can create an Inheritance Chain
class Pet	extends Animal {
}
class Dog	extends Pet	{
}

Q) What	is	an	Interface?
• An interface defines a contract for responsibilities (methods) of a class.
• An interface is a contract: the guy writing the interface says, "hey, I accept things looking that
way"
• Interface represents common actions between Multiple Classes.
• Example in Java api : Map interface, Collection interface.
Q) How	do	you	define	an	Interface?
An	 interface	 is	 declared	 by	 using	 the	 keyword	 interface.	 Look	 at	 the	 example	 below:	 Flyable	 is	 an	
interface.

//public	abstract	are	not	necessary
public abstract interface Flyable	{
			 //public	abstract	are	not	necessary
				public abstract void fly();
}



Q) How	do	you	implement	an	interface?

We can define a class implementing the interface by using the implements keyword. Let us look at a
couple of examples:
Example	1
Class	Aeroplane	implements	Flyable	and	implements	the	abstract	method	fly().
public class Aeroplane	implements Flyable{
				@Override
				public void fly()	{
								System.out.println("Aeroplane	is	flying");
				}
}
Example	2
public class Bird	implements Flyable{
				@Override
				public void fly()	{
								System.out.println("Bird	is	flying");
				}
}


Q) Can	you	explain	a	few	tricky	things	about	interfaces?
Variables	 in	 an	 interface	 are	 always	 public,	 static,	 final.	 Variables	 in	 an	 interface	 cannot	 be	 declared	
private.
interface ExampleInterface1	{
				//By	default	- public	static	final.	No	other	modifier	allowed
				//value1,value2,value3,value4	all	are	- public	static	final
				int value1 =	10;
				public int value2 =	15;
				public static int value3 =	20;
				public static final int value4 =	25;
				//private	int value5	=	10;//COMPILER	ERROR
}
Interface	methods	are	by	default	public	and	abstract.	Before	 Java	8,	A	concrete	method	 (fully	defined	
method)	cannot	be	created	in	an	interface.	Consider	the	example	below:
interface ExampleInterface1 {
 //By default - public abstract. No other modifier allowed
 void method1();//method1 is public and abstract
 //private void method6();//COMPILER ERROR!

 //This method, uncommented, would have given COMPILER ERROR!
 //in Java 7. Allowed from Java 8.
 default void method5() {
 System.out.println("Method5");
 }
}

Q) Can	you	extend	an	interface?

An interface can extend another interface. Consider the example below:
interface SubInterface1	extends ExampleInterface1{
				void method3();
}
Class	 implementing	 SubInterface1	 should	 implement	 both	 methods	 - method3	 and	 method1(from	
ExampleInterface1)
An interface cannot extend a class.
/*	//COMPILE	ERROR	IF	UnCommented
			//Interface	cannot	extend	a	Class
interface	SubInterface2	extends	Integer{
				void	method3();
}
*/

Q) Can	a	class	extend	multiple	interfaces?

A	class	can	implement	multiple interfaces. It	should	implement	all	the	method	declared	in	all	Interfaces	
being	implemented.
An	example	of	a	class	in	the	JDK	that	implements	several	interfaces	is	HashMap,	which	implements	the	
interfaces	Serializable,	Cloneable,	and	Map.	By	reading	this	list	of	interfaces,	you	can	infer	that	an	
instance	of	HashMap	(regardless	of	the	developer	or	company	who	implemented	the	class)	can	be	
cloned,	is	serializable	(which	means	that	it	can	be	converted	into	a	byte	stream;	see	the	section	
Serializable	Objects),	and	has	the	functionality	of	a	map.

interface ExampleInterface2	{
				void method2();
}
class SampleImpl	implements ExampleInterface1,ExampleInterface2{
				/*	A	class	should	implement	all	the	methods	in	an	interface.
							If	either	of	method1	or	method2	is	commented,	it	would	
							result	in	compilation	error.	
					*/
				public void method2()	{
								System.out.println("Sample	Implementation	for	Method2");
				}
				public void method1()	{
								System.out.println("Sample	Implementation	for	Method1");

}
				
}
Q) What	is	an	Abstract	Class?

An	abstract	class is	a	class	that	cannot	be	instantiated,	but	must	be	inherited	from.	An	abstract	class	may	
be	 fully	 implemented,	 but	 is	 more	 usually	 partially	 implemented	 or	 not	 implemented	 at	 all,	 thereby	
encapsulating	common	functionality	for	inherited	classes.
public abstract class AbstractClassExample	{
				public static void main(String[]	args)	{
								//An	abstract	class	cannot	be	instantiated
								//Below	line	gives	compilation	error	if	uncommented
								//AbstractClassExample	ex =	new	AbstractClassExample();
				}
}

Q) When	do	you	use	an	Abstract	Class?
If	 you	 want	 to	 provide	 common,	 implemented	 functionality	 among	 all	 implementations	 of	 your	
component,	use	an	abstract	class.	Abstract	classes	allow	you	to	partially	implement	your	class.
• An	 example	 of	 an	 abstract	 class	 in	 the	 JDK	 is	 AbstractMap,	 which	 is	 part	 of	 the	 Collections	
Framework.	Its	subclasses	 (which	include	HashMap,	TreeMap,	and	ConcurrentHashMap)	share	
many	methods	 (including	get,	put,	isEmpty,	containsKey,	and	containsValue)	 that	AbstractMap	
defines.
 example	abstract	method	:	public	abstract	Set>	entrySet();
• Another	Example	- Spring	AbstractController
In	 code	 below	 “AbstractClassExample	 ex =	 new	 AbstractClassExample();”	 gives	 a	 compilation	 error	
because	AbstractClassExample	is	declared	with	keyword	abstract.
Example	in	Java	:	HashMap	&	TreeMap	extend	AbstractMap.

Q) How	do	you	define	an	abstract	method?
An Abstract method does not contain body. An abstract method does not have any implementation. The
implementation of an abstract method should be provided in an over-riding method in a sub class.
				//Abstract	Class	can	contain	0	or	more	abstract	methods
				//Abstract	method	does	not	have	a	body
				abstract void abstractMethod1();
				abstract void abstractMethod2();
Abstract	method	can	be	declared	only	in	Abstract	Class. In	the	example	below,	abstractMethod()	gives	a	
compiler	error	because	NormalClass	is	not	abstract.
class NormalClass{
				abstract void abstractMethod();//COMPILER	ERROR
}


Q) Compare	Abstract	Class	vs	Interface?
Real Difference - Apple vs Orange
Syntactical Differences
• Methods and members of an abstract class can have any visibility. All methods of an interface
must be public.
• A concrete child class of an Abstract Class must define all the abstract methods. An Abstract
child class can have abstract methods. An interface extending another interface need not provide
default implementation for methods inherited from the parent interface.
• A child class can only extend a single class. An interface can extend multiple interfaces. A class
can implement multiple interfaces.
• A child class can define abstract methods with the same or less restrictive

Q) What	is	a	Constructor?
Constructoris invoked whenever we create an instance(object) of a Class. We cannot create an object
without a constructor.
Constructor has the same name as the class and no return type. It can accept any number of parameters.
class Animal	{
				String	name;
				//	This	is	called	a	one	argument	constructor.
				public Animal(String	name)	{
								this.name =	name;
				}
				public static void main(String[]	args)	{
								//	Since	we	provided	a	constructor,	compiler	does	not
								//	provide	a	default	constructor.
								//	Animal	animal	=	new	Animal();//COMPILER	ERROR!
								//	The	only	way	we	can	create	Animal1	object	is	by	using
								Animal	animal =	new Animal("Tommy");
				}
}

Q) What	is	a	Default	Constructor?
Default Constructor is the constructor that is provided by the compiler. It has no arguments. In the
example below, there are no Constructors defined in the Animal class. Compiler provides us with a
default constructor, which helps us create an instance of animal class.
public class Animal	{
				String	name;
				public static void main(String[]	args)	{
								//	Compiler	provides	this	class	with	a	default	no-argument	constructor.
								//	This	allows	us	to	create	an	instance	of	Animal	class.
								Animal	animal =	new Animal();
				}
}


Q) How	do	you	call	a	Super	Class	Constructor	from	a	Constructor?
A constructor can call the constructor of a super class using the super() method call. Only constraint is
that it should be the first statement i
Both example constructors below can replaces the no argument "public Animal() " constructor in Example
3.
public Animal()	{
				super();
				this.name	=	"Default	Name";
}
Will	this	code	Compile?
public Animal()	{
				this.name	=	"Default	Name";
				super();
}
Answer	is	NO.	super	should	be	always	called	on	the	first	line	of	the	constructor.

Q) What	is	the	use	of	this()?
Another	constructor	in	the	same	class	can	be	invoked	from	a	constructor,	using	this({parameters})	
method	call.
public Animal()	{
				this("Default	Name");
}
public Animal(String	name)	{
this.name =	name;
}

Q) Can	a	constructor	be	called	directly	from	a	method?
A constructor cannot be explicitly called from any method except another constructor.
class Animal	{
				String	name;
				public Animal()	{
				}
				public method() {
								Animal();//	Compiler	error
				}
}

Q) Is	 a	super	class	constructor	called	 even	when	 there	 is	no	 explicit	call	 from	 a	
sub	class	constructor?

If a super class constructor is not explicitly called from a sub class constructor, super class (no argument)
constructor is automatically invoked (as first line) from a sub class constructor.
Consider the example below:
class Animal	{
				public Animal()	{
								System.out.println("Animal	Constructor");
				}
}
class Dog	extends Animal	{
				public Dog()	{
								System.out.println("Dog	Constructor");
				}
}
class Labrador	extends Dog	{
				public Labrador()	{
								System.out.println("Labrador	Constructor");
				}
}
public class ConstructorExamples	{
				public static void main(String[]	args)	{
								Labrador	labrador =	new Labrador();
				}
}
Program	Output
Animal Constructor
Dog Constructor
Labrador Constructor


