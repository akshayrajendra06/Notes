What	is	ByteCode?
Java	bytecode	is	the	instruction	set	of	the	Java	virtual	machine.	Each	bytecode	is	composed	of	one,	or	in	
some	cases	two	bytes	that	represent	the	instruction	(opcode),	along	with	zero	or	more	bytes	for	passing	
parameters.


Compare	JDK	vs	JVM	VS	JRE.

1. JVM
a. Virtual	machine	that	run	the	Java	bytecode.
b. Makes	java	portable.
2. JRE
a. JVM	+	Libraries	+	Other	Components	(to	run	applets	and	other	java	applications)
3. JDK
a. JRE	+	Compilers	+	Debuggers

What	is	the	role	for	a	ClassLoader	in	Java?
A	Java	program	is	made	up	of	a	number	of	custom	classes	(written	by	programmers	like	us)	and	core	
classes	(which	come	pre-packaged	with	Java).	When	a	program	is	executed,	JVM	needs	to	load	the	
content	of	all	the	needed	class.	JVM	uses	a	ClassLoader	to	find	the	classes.
Three	Class	Loaders	are	shown	in	the	picture
• System	Class	Loader	- Loads	all	classes	from	CLASSPATH
• Extension	Class	Loader	- Loads	all	classes	from	extension	directory
• Bootstrap	Class	Loader	- Loads	all	the	Java	core	files
When	JVM	needs	to	find	a	class,	it	starts	with	System	Class	Loader.	If	it is	not	found,	it	checks	with	
Extension	Class	Loader.	If	it	not	found, it	goes	to	the	Bootstrap	Class	Loader.	If	a	class	is	still	not	found,	a	
ClassNotFoundException	is	thrown.

What	are	wrapper	classes?

A primitive wrapper class in the Java programming language is one of eight classes provided in the
java.lang package to provide object methods for the eight primitive types. All of the primitive wrapper
classes in Java are immutable.
Wrapper: Boolean,Byte,Character,Double,Float,Integer,Long,Short
Primitive: boolean,byte,char ,double, float, int , long,short


Why	do	we	need	Wrapper	Classes	in	Java?
A wrapper class wraps (encloses) around a data type and gives it an object appearance.
Reasons why we need Wrapper Classes
• null is a possible value
• use it in a Collection
• Methods that support Object like creation from other types.. like String
◦ Integer	number2 =	new Integer("55");//String
What	are	the	different	ways	of	creating	Wrapper	Class	Instances?
Two	ways	of	creating	Wrapper	Class	Instances	are	described	below.
Using	a	Wrapper	Class	Constructor
Integer	number =	new Integer(55);//int
Integer	number2 =	new Integer("55");//String
Float	number3 =	new Float(55.0);//double	argument
Float	number4 =	new Float(55.0f);//float	argument
Float	number5 =	new Float("55.0f");//String

Character	c1 =	new Character('C');//Only	char	constructor
//Character	c2	=	new	Character(124);//COMPILER	ERROR
Boolean	b =	new Boolean(true);
//"true"	"True"	"tRUe"	- all	String	Values	give	True
//Anything	else	gives	false
Boolean	b1 =	new Boolean("true");//value	stored	- true
Boolean	b2 =	new Boolean("True");//value	stored	- true
Boolean	b3 =	new Boolean("False");//value	stored	- false
Boolean	b4 =	new Boolean("SomeString");//value	stored	- false
valueOf		Static	Methods
Provide another way of creating a Wrapper Object
Integer	hundred =	
				Integer.valueOf("100");//100	is	stored	in	variable
Integer	seven	=	
				Integer.valueOf("111",	2);//binary	111	is	converted	to	7
				
	
What	are	differences	in	the	two	ways	of	creating	Wrapper	Classes?
The	difference	is	that using	the	Constructor you	will	always	create	a	new	object,	while	using	valueOf()
static	method,	it may	return	you	a	cached	value	with-in	a	range.	
For	example	:	The	cached	values	for long are	between [-128	to	127].
We should prefer	static	valueOf	method,	because	it	may	save	you	some	memory.	To	understand	it	further,	
here	is	an	implementation	of	valueOf	method	in	the	Long	class
 /**
 * Returns an {@code Integer} instance representing the specified
 * {@code int} value. If a new {@code Integer} instance is not
 * required, this method should generally be used in preference to
 * the constructor {@link #Integer(int)}, as this method is likely
 * to yield significantly better space and time performance by
 * caching frequently requested values.
 *
 * This method will always cache values in the range -128 to 127,
 * inclusive, and may cache other values outside of this range.
 *
 * @param i an {@code int} value.
 * @return an {@code Integer} instance representing {@code i}.
 * @since 1.5
 */
 public static Integer valueOf(int i) {
 if (i >= IntegerCache.low && i <= IntegerCache.high)
 return IntegerCache.cache[i + (-IntegerCache.low)];
 return new Integer(i);
 }
 
 
 What	is	Auto	Boxing?
Autoboxing	is	the	automatic	conversion	that	the	Java	compiler	makes	between	the	primitive	types	and	
their	corresponding	object	wrapper	classes.	For	example,	converting	an	int	to	an	Integer, a	double	to	a	
Double,	and	so	on.	If	the	conversion	goes	the	other	way,	this	is	called	unboxing.
Example	1
Integer	nineC	=	9;
Example	2
Integer	ten	=	new Integer(10);
ten++;//allowed.	Java	does	had	work	behind the	screen	for	us

What	are	the	advantages	of Auto	Boxing?
Auto	Boxing	helps	in	saving	memory	by	reusing	already	created	Wrapper	objects.	Auto	Boxing	uses	the	
static	valueOf	methods.	However	wrapper	classes	created	using	new	are	not	reused.
Two	wrapper	objects	created	using	new	are	not	same	object.
Integer	nineA	=	new Integer(9);
Integer	nineB	=	new Integer(9);
System.out.println(nineA	==	nineB);//false
System.out.println(nineA.equals(nineB));//true
Two	wrapper	objects	created	using	boxing	are	same	object.
Integer	nineC	=	9;
Integer	nineD	=	9;
System.out.println(nineC	==	nineD);//true
System.out.println(nineC.equals(nineD));//true

What	is	Casting?
Casting is used when we want to convert on data type to another.
There are two types of Casting
• Implicit Casting
• Explicit Casting
What	is	Implicit	Casting?
Implicit Casting is done by the compiler. Good examples of implicit casting are all the automatic widening
conversions i.e. storing smaller values in larger variable types.
int value	=	100;
long number =	value;	//Implicit	Casting
float f =	100;	//Implicit	Casting	

What	is	Explicit	Casting?
Explicit Casting is done through code. Good examples of explicit casting are the narrowing conversions.
Storing larger values into smaller variable types;
long number1	=	25678;
int number2 =	(int)number1;//Explicit	Casting
//int x	=	35.35;//COMPILER	ERROR
int x =	(int)35.35;//Explicit	Casting
Explicit casting would cause truncation of value if the value stored is greater than the size of the variable.
int bigValue	=	280;
byte small	=	(byte)	bigValue;
System.out.println(small);//output	24.	Only	8	bits	remain.



 What	are	differences	between	String	and	StringBuffer?
• Objects	of	type	String	are	immutable.	StringBuffer	is	used	to	represent	values	that	can	be	
modified.
• In	situations	where	values	are	modified	a	number	to	times,	StringBuffer	yields	significant	
performance	benefits.
• Both	String	and	StringBuffer	are	thread-safe.
• StringBuffer	is	implemented	by	using	synchronized	keyword	on	all	methods.

What	are	differences	between	StringBuilder	and	StringBuffer?
StringBuilder	is	not	thread	safe.	So,	it	performs	better	in	situations	where	thread	safety	is	not	required.
Can	you	give	examples	of	different	utility	methods	in	String	class?
String	class	defines	a	number	of	methods	to	get	information	about	the	string	content.
String	str	=	"abcdefghijk";
Get	information	from	String
Following	methods	help	to	get information	from	a	String.
//char	charAt(int paramInt)
System.out.println(str.charAt(2));	//prints	a	char	- c
System.out.println("ABCDEFGH".length());//8
System.out.println("abcdefghij".toString());	//abcdefghij
System.out.println("ABC".equalsIgnoreCase("abc"));//true
//Get	All	characters	from	index	paramInt
//String	substring(int paramInt)
System.out.println("abcdefghij".substring(3));	//cdefghij
//All	characters	from	index	3	to	6
System.out.println("abcdefghij".substring(3,7));	//defg


What	is	a	Class?	
Let’s	look	at	an	example:
package com.rithus;
public class CricketScorer	{
				//Instance	Variables	- constitute	the	state	of	an	object
				private int score;
				//Behavior	- all	the	methods	that	are	part	of	the	class
				//An	object	of	this	type	has	behavior	based	on	the	
				//methods	four,	six	and	getScore
				public void four(){
								score =	score +	4;
				}
				
				public void six(){
								score =	score +	6;
				}
				
				public int getScore()	{
								return score;
				}
				
				public static void main(String[]	args)	{
								CricketScorer	scorer	=	new CricketScorer();
								scorer.six();
								//State	of	scorer	is	(score	=>	6)
								scorer.four();
								//State	of	scorer	is	(score	=>	10)
								System.out.println(scorer.getScore());
				}
}
Class
A class is a Template. In above example, Class CricketScorer is the template for creating multiple
objects. A class defines state and behavior that an object can exhibit.
What	is	an	Object?
An instance of a class. In the above example, we create an object using new CricketScorer(). The
reference of the created object is stored in scorer variable. We can create multiple objects of the same
class.
What	is	state	of	an	Object?
Values assigned to instance variables of an object. Consider following code snippets from the above
example. The value in score variable is initially 0. It changes to 6 and then 10. State of an object might
change with time. 
	scorer.six();
								//State	of	scorer	is	(score	=>	6)
								scorer.four();
								//State	of	scorer	is	(score	=>	10)
What	is	behavior	of	an	Object?
Methods supported by an object. Above example the behavior supported is six(), four() and getScore().
What	is	the	super	class	of	every	class	in	Java?
Every class in java is a sub class of the class Object. When we create a class we inherit all the methods
and properties of Object class. Let’s look at a simple example:
String	str	=	"Testing";
System.out.println(str.toString());
System.out.println(str.hashCode());
System.out.println(str.clone());
if(str	instanceof Object){
				System.out.println("I	extend	Object");//Will	be	printed
}
In the above example, toString, hashCode and clone methods for String class are inherited from Object
class and overridden.
Explain	about	toString	method	?
toString method is used to print the content of an Object. If the toString method is not overridden in a
class, the default toString method from Object class is invoked. This would print some hashcode as
shown in the example below. However, if toString method is overridden, the content returned by the
toString method is printed.
Consider the class given below:
class Animal	{
				public Animal(String	name,	String	type)	{
								this.name =	name;
								this.type =	type;
				}
				String	name;
				String	type;
}
Run this piece of code:
Animal	animal	=	new Animal("Tommy",	"Dog");
System.out.println(animal);//com.rithus.Animal@f7e6a96
Output does NOT show the content of animal (what name? and what type?). To show the content of the
animal object, we can override the default implementation of toString method provided by Object class.


What	 are	 the	 important	 things	 to	 consider	 when	 implementing	 equals	
method?	
Any equals implementation should satisfy these properties:
1. Reflexive. For any reference value x, x.equals(x) returns true.
2. Symmetric. For any reference values x and y, x.equals(y) should return true if and only if
y.equals(x) returns true.
3. Transitive. For any reference values x, y, and z, if x.equals(y) returns true and y.equals(z) returns
true, then x.equals(z) must return true.
4. Consistent. For any reference values x and y, multiple invocations of x.equals(y) consistently
return true or consistently return false, if no information used in equals is modified.
5. For any non-null reference value x, x.equals(null) should return false.









